import("//gn/toolchain/rtems/rtems.gni")
import("//gn/common.gni")
import("//gn/utils/objcopy.gni")
import("//gn/utils/mkimage.gni")

toolchain_prefix = "${target_cpu}-rtems${target_version}-"

# Top-level project target
group("all") {
  deps = [":rtems"]
  if (use_bin) {
    deps += [":binary"]
  }
  if (use_uboot) {
    deps += [":image"]
  }
}

# Generate executable target
executable("rtems") {
  libs = []
  defines = []
  sources = [
    "main.c",
    "shell.c",
    "ram0.c"
  ]
  deps = [
    ":preprocess",
    "bsps/shared",
    "component",
    "bsps/${target_cpu}/${target_board}:board"
  ]
  if (use_testsuite) {
    deps += ["testsuite"]
  }

  if (use_libbsd) {
    defines += [
      "RTEMS_BSD_CONFIG_INIT",
      "RTEMS_BSD_CONFIG_BSP_CONFIG"
    ]
    libs += ["bsd"]
    if (use_bsdnet_ftpd) {
      defines += ["RTEMS_BSD_CONFIG_SERVICE_FTPD"]
      libs += ["ftpd"]
    }
    if (use_bsdnet_telnet) {
      defines += ["RTEMS_BSD_CONFIG_SERVICE_TELNETD"]
      libs += ["telnetd"]
    }
  }
  if (use_debugger) {
    defines += ["CONFIGURE_DEBUGGER"]
    libs += ["debugger"]
  }
  if (use_backtrace) {
    defines +=["CONFIGURE_BACKTRACE"]
  }
}

# Binary and uboot image generate
if (use_bin) {
  objcopy("binary") {
    format = "binary"
    toolchain_prefix = toolchain_prefix
    input = "rtems"
    deps = [":rtems"]
  }
  if (use_uboot) {
    mkimage("image") {
      loadaddr = uboot_ldaddr
      if (uboot_enaddr != -1) {
        entryaddr = uboot_enaddr
      }
      input = "rtems"
      comp = "none"
      arch = target_cpu
      deps = [":binary"]
    }
  }
}

# Build pre-precess action
group("preprocess") {
  basepath = rebase_path("//embeded/rtems")
  srcpath = "${basepath}/bsps/${target_cpu}/${target_board}/include/asm"
  dstpath = "${basepath}/include/bsp/asm"
  inputargs = [
    "rm -rf ${dstpath}",
    "ln -s  ${srcpath} ${dstpath}"
  ]
  exec_script("//gn/utils/shell.py", inputargs)
}

# Build post-precess action
action("postprocess") {
  basepath = rebase_path("${root_out_dir}")
  script = "//gn/utils/shell.py"
  outputs = ["${root_out_dir}/rtems.list"]
  args = [
    "${toolchain_prefix}objdump -d ${basepath}/rtems.elf > ${basepath}/rtems.list"
  ]
  deps = [":rtems"]
}

# Custom commands
generated_file("custom") {
  outputs = ["$root_build_dir/cmd/build.ninja"]
  data_keys = ["content"]
  deps = [
    ":sysinit"
  ]
}

group("sysinit") {
  root_path = rebase_path("$root_out_dir")
  metadata = {
    content = []
    content += [ 
      "rule sysinit_cmd",
      " command = rtems-exeinfo -I \$in",
      " pool = console",
      " description = Dump rtems sysinit section"
    ]
    content += [ 
      "build sysinit: sysinit_cmd ${root_path}/rtems.elf"
    ]
  }
}

# 
# Copyright 2022 wtcat
#
import("//gn/toolchain/rtems/rtems.gni")
import("//gn/common.gni")
import("//gn/utils/objcopy.gni")
import("//gn/utils/mkimage.gni")

toolchain_prefix = "${target_cpu}-rtems${target_version}-"

# Top-level project target
group("all") {
  deps = [
    ":rtems",
    "//gn/utils:custom"
  ]
  if (use_bin) {
    deps += [":binary"]
  }
  if (use_uboot) {
    deps += [":image"]
  }
}

# Generate executable target
executable("rtems") {
  libs = []
  defines = []
  sources = [ "init/init.c" ]
  deps = [
    ":preprocess",
    "//application",
    "//embeded/rootfs",
    "//embeded/rtems/component",
    "//embeded/rtems/bsps/shared",
    "//embeded/rtems/bsps/${target_cpu}/${target_board}:board"
  ]
  configs += [
    "//gn/config:backtrace"
  ]
  if (use_shell) {
    deps += ["//embeded/rtems/shell"]
  }
  if (use_gui) {
    deps +=["//embeded/rtems/component/lvgl"]
  }
  if (use_testsuite) {
    deps += [
      "//embeded/thirdparty/googletest",
      "//embeded/rtems/testsuite"
    ]
  }
  if (use_libbsd) {
    defines += [
      "RTEMS_BSD_CONFIG_INIT",
      "RTEMS_BSD_CONFIG_BSP_CONFIG"
    ]
    libs += ["bsd"]
    if (use_bsdnet_ftpd) {
      defines += ["RTEMS_BSD_CONFIG_SERVICE_FTPD"]
      libs += ["ftpd"]
    }
    if (use_bsdnet_telnet) {
      defines += ["RTEMS_BSD_CONFIG_SERVICE_TELNETD"]
      libs += ["telnetd"]
    }
    if (use_gdbserver) {
      defines += ["CONFIGURE_GDBSERVER"]
      libs += ["debugger"]
    }
  }
  if (use_devicetree) {
    defines +=["CONFIGURE_FDT"]
  }
}

# Binary and uboot image generate
if (use_bin) {
  objcopy("binary") {
    format = "binary"
    toolchain_prefix = toolchain_prefix
    input = "rtems"
    deps = [":rtems"]
  }
  if (use_uboot) {
    mkimage("image") {
      loadaddr = uboot_ldaddr
      if (uboot_enaddr != -1) {
        entryaddr = uboot_enaddr
      }
      input = "rtems"
      comp = "gzip"
      arch = target_cpu
      deps = [":binary"]
    }
  }
}

# Build pre-precess action
group("preprocess") {
  base_path = rebase_path("//embeded/rtems")
  build_dir = rebase_path("${root_out_dir}")
  board_path = "${base_path}/bsps/${target_cpu}/${target_board}/include/configs"
  asm_path   = "${base_path}/bsps/${target_cpu}/include"
  inputargs = [
    "rm -rf ${base_path}/include/asm ${build_dir}/configs",
    "ln -s  ${asm_path}   ${base_path}/include/asm",
    "ln -s  ${board_path} ${build_dir}/configs"
  ]
  exec_script("//gn/utils/shell.py", inputargs)
}

# Build post-precess action
action("postprocess") {
  basepath = rebase_path("${root_out_dir}")
  script = "//gn/utils/shell.py"
  outputs = ["${root_out_dir}/rtems.lst"]
  args = [
    "${toolchain_prefix}objdump -d ${basepath}/rtems.elf > ${basepath}/rtems.lst"
  ]
  deps = [":rtems"]
}


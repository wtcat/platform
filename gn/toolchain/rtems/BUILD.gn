# Copyright(c) 2022 wtcat

import("//gn/toolchain/gcc_toolchain.gni")
import("//gn/toolchain/rtems/rtems.gni")

# rtems_compile_options = [
#   '--cflags',
#   '--libs-only-other',
# ]
pkgargs = ["--path", "${rtems_package_path}"]
pkgresult = exec_script("//gn/toolchain/rtems/configure.py", pkgargs, "value")
CC_FLAGS  = pkgresult[0]
LD_FLAGS  = pkgresult[1]

toolchain_prefix = "${target_cpu}-rtems${target_version}-"

gcc_toolchain("rtems") {
  spec_flags = "${LD_FLAGS}"
  common_flags = "-Wall -Wimplicit-function-declaration -Wstrict-prototypes -fno-common -fdata-sections -ffunction-sections"
  extra_cppflags = spec_flags + common_flags
  extra_cflags = "-std=gnu17"
  extra_cxxflags = "-std=c++17"
  extra_asmflags = "-x assembler-with-cpp"
  extra_ldflags = spec_flags

  cc  = "${toolchain_prefix}gcc"
  cxx = "${toolchain_prefix}g++"
  ar  = "${toolchain_prefix}ar"
  ld  = cxx
  size = "${toolchain_prefix}size"
  if (use_rtl) {
    syms = "rtems-syms"
  }

  # Output linker map files for binary size analysis.
  enable_linker_map = true
  executable_extension = ".elf"
  toolchain_args = {
    current_cpu = target_cpu
    current_os = "rtems"
  }
}

config("rtems_config") {
    include_dirs = ["//embeded/rtems/include"]
    cflags = CC_FLAGS
    ldflags = CC_FLAGS
    asmflags = CC_FLAGS
}
